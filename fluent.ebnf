body                 ::= (entry NL)* entry? EOF
entry                ::= comment
                       | section
                       | message

comment              ::= '#' char*
section              ::= '[[' __ keyword __ ']]'

char                 ::= [https://www.w3.org/TR/REC-xml/#NT-Char]
__                   ::= [#x20#x9]*   /* space, tab */
NL                   ::= [#xA#xD]+    /* line feed, carriage return */

identifier           ::= [a-zA-Z_?-] ([a-zA-Z0-9_?-])*
external             ::= '$' identifier
keyword              ::= [a-zA-Z_.?-] ([a-zA-Z0-9_.?- ]* [a-zA-Z0-9_.?-])?
builtin              ::= [A-Z_?-]+
number               ::= [0-9]+ ('.' [0-9]+)?

variant-key          ::= number | keyword
variant              ::= '[' variant-key ']' __ pattern NL
default-variant      ::= '*' variant
variant-list         ::= NL (__ variant)* __ default-variant (__ variant)*

attribute            ::= '.' identifier __ '=' __ pattern NL
attribute-list       ::= NL (__ attribute)+

message              ::= identifier __ '=' __ (pattern attribute-list? | attribute-list)
pattern              ::= unquoted-pattern
                       | quoted-pattern
unquoted-pattern     ::= (unquoted-text | placeable | block-text)+
quoted-pattern       ::= '"' (quoted-text | placeable)* '"'
unquoted-text        ::= ([^{] | '\{')+
quoted-text          ::= ([^{"] | '\{' | '\"')+
block-text           ::= NL __ '|' unquoted-pattern

placeable            ::= '{' __ (expression | select-expression | variant-list) __ '}'
expression           ::= quoted-pattern
                       | number
                       | identifier
                       | external
                       | attribute-expression
                       | variant-expression
                       | call-expression
                       | placeable

select-expression    ::= expression __ ' ->' __ variant-list
attribute-expression ::= identifier '.' identifier
variant-expression   ::= identifier '[' keyword ']'
call-expression      ::= builtin '(' __ arglist? __ ')'
arglist              ::= argument (__ ',' __ arglist)?
argument             ::= expression
                       | keyword-argument
keyword-argument     ::= identifier __ ':' __ ('"' quoted-text? '"' | number)
