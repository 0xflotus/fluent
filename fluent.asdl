module Fluent
{
    res = Resource(entry* body, comment? comment)

    entry = Message(iden id, pat? value, attr* attributes, comment? comment)
          | Section(key key, comment? comment)
          | Comment(comment)
          | Junk(string body)

    -- Pattern values
    pat = Pattern(elem* elements, bool quoted)
    elem = String(string)
         | Placeable(plcbl)

    -- Expressions allowed inside of braced Placeables
    plcbl = Expression(expr)
          | SelectExpression(expr? expr, var* vars)

    -- Expressions allowed as selectors of SelectExpression and
    -- arguments to CallExpression
    expr = Pattern(pat)
         | Number(number)
         | MessageReference(iden id)
         | ExternalArgument(iden id)
         | AttributeExpression(iden id, iden name)
         | VariantExpression(iden id, varkey key)
         | CallExpression(fun callee, arg* args)
      .  | Placeable(plcbl)

    -- Attributes of Message
    attr = Attribute(iden id, pat value)

    -- Variants of SelectExpression
    var = Variant(varkey key, pat value, bool default)
    varkey = Number(number)
           | Keyword(key)

    -- Arguments to CallExpression
    arg = Expression(expr)
        | NamedArgument(iden name, argval val)
    argval = Number(number)
           | String(string)
    
    iden = (string name)
    key = (string name)
    fun = (string name)
    number = (string value)

    comment = (string body)
}
